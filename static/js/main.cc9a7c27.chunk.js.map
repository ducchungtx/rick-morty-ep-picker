{"version":3,"sources":["NotFound.tsx","Actions.ts","Store.tsx","HomePage.tsx","FavsPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NotFound","react_default","a","createElement","fetchDataAction","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","response","data","wrap","_context","prev","next","fetch","sent","ok","json","abrupt","type","payload","_embedded","episodes","Error","t0","console","log","stop","_x","apply","this","arguments","toggleFavAction","state","episode","episodeInFav","favorites","includes","favoritesWithoutEpisode","filter","fav","id","initialState","Store","React","createContext","reducer","action","objectSpread","concat","toConsumableArray","EpisodeList","lazy","__webpack_require__","e","then","bind","HomePage","_React$useContext","useContext","useEffect","props","store","Fragment","Suspense","fallback","className","FavsPage","FavsPage_EpisodeList","routes","/rick-morty-ep-picker/","src_HomePage","/rick-morty-ep-picker/favs","src_FavsPage","App","routeResult","useRoutes","_","dist","href","length","src_NotFound","children","Boolean","window","location","hostname","match","ReactDOM","render","_React$useReducer","useReducer","_React$useReducer2","slicedToArray","Provider","value","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6LAMeA,SAJE,WACf,OAAOC,EAAAC,EAAAC,cAAA,iDCDIC,EAAe,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAN,EAAAO,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAL,EAAAN,EAAAY,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAGzB,0EAHyBD,EAAAE,KAAA,EAIJC,MADrB,2EAHyB,YAIrBN,EAJqBG,EAAAI,MAKdC,GALc,CAAAL,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAMNL,EAASS,OANH,cAMnBR,EANmBE,EAAAI,KAAAJ,EAAAO,OAAA,SAOlBX,EAAS,CACdY,KAAM,aACNC,QAASX,EAAKY,UAAUC,YATD,cAYnB,IAAIC,MAAM,gCAZS,QAAAZ,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,SAe3Bc,QAAQC,IAARf,EAAAa,IAf2B,yBAAAb,EAAAgB,SAAArB,EAAA,kBAAH,gBAAAsB,GAAA,OAAA3B,EAAA4B,MAAAC,KAAAC,YAAA,GAmBfC,EAAkB,SAC7BC,EACA1B,EACA2B,GAEA,IAAMC,EAAwBF,EAAMG,UAAUC,SAASH,GACjDI,EAA2CL,EAAMG,UAAUG,OAC/D,SAACC,GAAD,OAAcA,EAAIC,KAAOP,EAAQO,KAYnC,OAAsBlC,EAAf4B,EALW,CAChBhB,KAAM,aACNC,QAASkB,GANI,CACbnB,KAAM,UACNC,QAAS,CAACc,2BC9BRQ,EAAuB,CAC3BpB,SAAU,GACVc,UAAW,IAGAO,EAAQC,IAAMC,cAA4BH,GAEjDI,EAAU,SAACb,EAAec,GAC9B,OAAQA,EAAO5B,MACb,IAAK,aACH,OAAOjB,OAAA8C,EAAA,EAAA9C,CAAA,GAAK+B,EAAZ,CAAmBX,SAAUyB,EAAO3B,UACtC,IAAK,UACH,OAAOlB,OAAA8C,EAAA,EAAA9C,CAAA,GAAK+B,EAAZ,CAAmBG,UAAS,GAAAa,OAAA/C,OAAAgD,EAAA,EAAAhD,CAAM+B,EAAMG,WAAZlC,OAAAgD,EAAA,EAAAhD,CAA0B6C,EAAO3B,YAC/D,IAAK,aACH,OAAOlB,OAAA8C,EAAA,EAAA9C,CAAA,GAAK+B,EAAZ,CAAmBG,UAAWW,EAAO3B,UACvC,QACE,OAAOa,ICdPkB,EAAcP,IAAMQ,KAAU,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YA2B3BC,EAzBE,WAAmB,IAAAC,EACNd,IAAMe,WAAWhB,GAArCV,EAD0ByB,EAC1BzB,MAAO1B,EADmBmD,EACnBnD,SAEfqC,IAAMgB,UAAU,WACd5D,EAAgBO,IACf,IAEH,IAAMsD,EAAuB,CAC3BvC,SAAUW,EAAMX,SAChBwC,MAAO,CAAE7B,QAAO1B,YAChByB,kBACAI,UAAWH,EAAMG,WAGnB,OACEvC,EAAAC,EAAAC,cAACF,EAAAC,EAAMiE,SAAP,KACElE,EAAAC,EAAAC,cAACF,EAAAC,EAAMkE,SAAP,CAAgBC,SAAUpE,EAAAC,EAAAC,cAAA,0BACxBF,EAAAC,EAAAC,cAAA,WAASmE,UAAU,kBACjBrE,EAAAC,EAAAC,cAACoD,EAAgBU,OCpBrBV,EAAcP,IAAMQ,KAAU,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAqB3BW,EAnBE,WAAmB,IAAAT,EACNd,IAAMe,WAAWhB,GAArCV,EAD0ByB,EAC1BzB,MAAO1B,EADmBmD,EACnBnD,SAETsD,EAAuB,CAC3BvC,SAAUW,EAAMG,UAChB0B,MAAO,CAAE7B,QAAO1B,YAChByB,kBACAI,UAAWH,EAAMG,WAGnB,OACEvC,EAAAC,EAAAC,cAACF,EAAAC,EAAMkE,SAAP,CAAgBC,SAAUpE,EAAAC,EAAAC,cAAA,2BACxBF,EAAAC,EAAAC,cAAA,OAAKmE,UAAU,kBACbrE,EAAAC,EAAAC,cAACqE,EAAgBP,aCbnBQ,EAAS,CACbC,yBAA0B,kBAAMzE,EAAAC,EAAAC,cAACwE,EAAD,OAChCC,6BAA8B,kBAAM3E,EAAAC,EAAAC,cAAC0E,EAAD,QA4BvBC,EAzBH,SAACb,GACX,IAAMc,EAAcC,oBAAUP,GADSX,EAGlBd,IAAMe,WAAWhB,GAA9BV,EAH+ByB,EAG/BzB,MAH+ByB,EAGxBmB,EAEf,OACEhF,EAAAC,EAAAC,cAACF,EAAAC,EAAMiE,SAAP,KACElE,EAAAC,EAAAC,cAAA,UAAQmE,UAAU,UAChBrE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,yCAEFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAGC,KAAK,0BAAR,QACAlF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAGC,KAAK,8BAAR,gBACgB9C,EAAMG,UAAU4C,UAInCL,GAAe9E,EAAAC,EAAAC,cAACkF,EAAD,MACfpB,EAAMqB,WCpBOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP5F,EAAAC,EAAAC,cLe2B,SAAAE,GAEoB,IAD/CiF,EAC+CjF,EAD/CiF,SAC+CQ,EACrB9C,IAAM+C,WAAW7C,EAASJ,GADLkD,EAAA1F,OAAA2F,EAAA,EAAA3F,CAAAwF,EAAA,GACxCzD,EADwC2D,EAAA,GACjCrF,EADiCqF,EAAA,GAE/C,OAAO/F,EAAAC,EAAAC,cAAC4C,EAAMmD,SAAP,CAAgBC,MAAO,CAAE9D,QAAO1B,aAAa2E,IKnBpD,KACErF,EAAAC,EAAAC,cAACiG,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC","file":"static/js/main.cc9a7c27.chunk.js","sourcesContent":["import React from 'react'\n\nconst NotFound = (): JSX.Element => {\n  return <div>Not found</div>\n}\n\nexport default NotFound\n","import { IState, IAction, IEpisode, Dispatch } from './interfaces'\n\nexport const fetchDataAction = async (dispatch: Dispatch): Promise<any> => {\n  try {\n    const URL =\n      'https://api.tvmaze.com/singlesearch/shows?q=rick-&-morty&embed=episodes'\n    const response = await fetch(URL)\n    if (response.ok) {\n      const data = await response.json()\n      return dispatch({\n        type: 'FETCH_DATA',\n        payload: data._embedded.episodes,\n      })\n    } else {\n      throw new Error('Network response was not ok.')\n    }\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport const toggleFavAction = (\n  state: IState,\n  dispatch: Dispatch,\n  episode: IEpisode\n): void => {\n  const episodeInFav: Boolean = state.favorites.includes(episode)\n  const favoritesWithoutEpisode: Array<IEpisode> = state.favorites.filter(\n    (fav: any) => fav.id !== episode.id\n  )\n\n  const addFav = {\n    type: 'ADD_FAV',\n    payload: [episode],\n  }\n  const removeFav = {\n    type: 'REMOVE_FAV',\n    payload: favoritesWithoutEpisode,\n  }\n\n  return episodeInFav ? dispatch(removeFav) : dispatch(addFav)\n}\n","import React from 'react'\nimport { IState, IAction } from './interfaces'\n\nconst initialState: IState = {\n  episodes: [],\n  favorites: [],\n}\n\nexport const Store = React.createContext<IState | any>(initialState)\n\nconst reducer = (state: IState, action: IAction): IState => {\n  switch (action.type) {\n    case 'FETCH_DATA':\n      return { ...state, episodes: action.payload }\n    case 'ADD_FAV':\n      return { ...state, favorites: [...state.favorites, ...action.payload] }\n    case 'REMOVE_FAV':\n      return { ...state, favorites: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const StoreProvider = ({\n  children,\n}: JSX.ElementChildrenAttribute): JSX.Element => {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n  return <Store.Provider value={{ state, dispatch }}>{children}</Store.Provider>\n}\n","import React from 'react'\nimport { fetchDataAction, toggleFavAction } from './Actions'\nimport { Store } from './Store'\nimport { IEpisodeProps } from './interfaces'\n\nconst EpisodeList = React.lazy<any>(() => import('./EpisodesList'))\n\nconst HomePage = (): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store)\n\n  React.useEffect((): void => {\n    fetchDataAction(dispatch)\n  }, [])\n\n  const props: IEpisodeProps = {\n    episodes: state.episodes,\n    store: { state, dispatch },\n    toggleFavAction,\n    favorites: state.favorites,\n  }\n\n  return (\n    <React.Fragment>\n      <React.Suspense fallback={<div>...loading</div>}>\n        <section className=\"episode-layout\">\n          <EpisodeList {...props} />\n        </section>\n      </React.Suspense>\n    </React.Fragment>\n  )\n}\n\nexport default HomePage\n","import React from 'react'\nimport { toggleFavAction } from './Actions'\nimport { Store } from './Store'\nimport { IEpisodeProps } from './interfaces'\n\nconst EpisodeList = React.lazy<any>(() => import('./EpisodesList'))\n\nconst FavsPage = (): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store)\n\n  const props: IEpisodeProps = {\n    episodes: state.favorites,\n    store: { state, dispatch },\n    toggleFavAction,\n    favorites: state.favorites,\n  }\n\n  return (\n    <React.Suspense fallback={<div> ...loading</div>}>\n      <div className=\"episode-layout\">\n        <EpisodeList {...props} />\n      </div>\n    </React.Suspense>\n  )\n}\n\nexport default FavsPage\n","import React from 'react'\nimport NotFound from './NotFound'\nimport HomePage from './HomePage'\nimport FavsPage from './FavsPage'\nimport { Store } from './Store'\nimport { useRoutes, A } from 'hookrouter'\n\nconst routes = {\n  '/rick-morty-ep-picker/': () => <HomePage />,\n  '/rick-morty-ep-picker/favs': () => <FavsPage />,\n}\n\nconst App = (props: any): JSX.Element => {\n  const routeResult = useRoutes(routes)\n\n  const { state, _ } = React.useContext(Store)\n\n  return (\n    <React.Fragment>\n      <header className=\"header\">\n        <div>\n          <h1>Rick & Morty</h1>\n          <p>Pick your favorite episode!</p>\n        </div>\n        <nav>\n          <A href=\"/rick-morty-ep-picker/\">Home</A>\n          <A href=\"/rick-morty-ep-picker/favs\">\n            Favorite(s): {state.favorites.length}\n          </A>\n        </nav>\n      </header>\n      {routeResult || <NotFound />}\n      {props.children}\n    </React.Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { StoreProvider } from './Store'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}